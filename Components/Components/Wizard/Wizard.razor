@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<CascadingValue Value="this" Name="Parent" IsFixed="true">
    @ChildContent
</CascadingValue>

<div class="card wizard-card-no-shadow" data-color="@Theme.ToString().ToLower()" id="@Id" style="border: none !important">
    <div class="wizard-header">
        <h3 class="wizard-title h3-wizard">@Title</h3>
    </div>
    <div>
        <div class="wizard-navigation">
            <ul class="nav nav-pills nav-justified" style="margin-bottom: 1.5em">
                @{
                    for (int i = 1; i <= Steps.Count; i++)
                    {
                        int i_local = i;

                        <li class="nav-item" @key="i">
                            <a class="nav-link"
                               style="cursor: pointer" @onclick="@(() => SetActivePage(i_local))">@(Steps[i_local - 1]?.Name ?? "Step")</a>
                        </li>
                    }
                }
            </ul>
            <div class="moving-tab"></div>

        </div>
        <div id="container-fluid">
            <div id="tab-content">
                @{
                    for (int i = 1; i <= Steps.Count; i++)
                    {
                        var step = Steps[i - 1];

                        if (currentStep == i)
                        {
                            @step.ChildContent;
                        }
                    }
                }
            </div>
        </div>
    </div>

    <div class="wizard-footer">
        <div class="pull-left">
            <button class="btn-wizard btn-wizard-previous btn-wizard-fill btn-wizard-@PreviousButtonClass.ToString().ToLower() btn-wizard-wd" type="button" @onclick="@PreviousPage" disabled="@IsFirstStep()">Previous</button>
        </div>

        @if (IsLastStep())
        {
            <div class="pull-right">
                <button class="btn-wizard btn-wizard-next btn-wizard-fill btn-wizard-@FinishButtonClass.ToString().ToLower() btn-wizard-wd" type="button" @onclick="@Finished">Finished</button>
            </div>
        }
        else
        {
            <div class="pull-right">
                <button class="btn-wizard btn-wizard-next btn-wizard-fill btn-wizard-@NextButtonClass.ToString().ToLower() btn-wizard-wd" type="button" @onclick="@NextPage">Next</button>
            </div>
        }
        <div class="clearfix"></div>
    </div>
</div>

@code {
    #region Parameters
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public Theme Theme { get; set; } = Theme.Red;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback OnPrevious { get; set; }

    [Parameter]
    public EventCallback OnNext { get; set; }

    [Parameter]
    public EventCallback OnFinished { get; set; }

    [Parameter]
    public EventCallback<int> OnSelectedStep { get; set; }

    [Parameter]
    public Buttons PreviousButtonClass { get; set; } = Buttons.Default;

    [Parameter]
    public Buttons NextButtonClass { get; set; } = Buttons.Danger;

    [Parameter]
    public Buttons FinishButtonClass { get; set; } = Buttons.Danger;
    #endregion
    #region Instance variables
    private List<Step> Steps = new List<Step>();
    private int currentStep = 1;

    private Task<IJSObjectReference> _module;
    private Task<IJSObjectReference> Module => _module ??= jsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/CrahunBlazorComponents/wizard/wizard.js").AsTask();

    private static int instanceNumber;
    private string Id = $"wizard{instanceNumber}";
    #endregion
    #region Methods
    public void AddStep(Step step)
    {
        Steps.Add(step);
        StateHasChanged();
    }

    public bool IsFirstStep() => currentStep == 1;
    public bool IsLastStep() => currentStep == Steps.Count;

    public void SetActivePage(int currentIndex)
    {
        if(Steps.Count < currentIndex)
        {
            throw new InvalidOperationException("Tried to navigate to non existing step index");
        }

        OnSelectedStep.InvokeAsync(currentIndex);

        if (currentIndex == currentStep)
        {
            return;
        }

        currentStep = currentIndex;
        _ = RefreshAnimation();
        StateHasChanged();
    }

    public void NextPage()
    {
        currentStep++;
        _ = RefreshAnimation();
        OnNext.InvokeAsync();
    }

    public void PreviousPage()
    {
        currentStep--;
        _ = RefreshAnimation();
        OnPrevious.InvokeAsync();
    }

    public void Finished()
    {
        OnFinished.InvokeAsync();
    }

    public async Task RefreshAnimation()
    {
        var module = await Module;
        await module.InvokeVoidAsync("refreshAnimation", Id, currentStep - 1);
    }
    #endregion
    #region Lifercycle
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            await RefreshAnimation();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module != null)
        {
            var module = await _module;
            await module.DisposeAsync();
        }
    }

    public Wizard()
    {
        Wizard.instanceNumber++;
    }
    #endregion
}
